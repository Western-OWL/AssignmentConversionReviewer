package ca.uwo.wts.owl.data.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import ca.uwo.wts.owl.data.SakaiRealm;
import ca.uwo.wts.owl.data.SakaiRealmRole;

/**
 * Class _SakaiRealmRlGr was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _SakaiRealmRlGr extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String REALM_KEY_PK_COLUMN = "REALM_KEY";
    public static final String USER_ID_PK_COLUMN = "USER_ID";

    public static final Property<String> ACTIVE = Property.create("active", String.class);
    public static final Property<String> PROVIDED = Property.create("provided", String.class);
    public static final Property<String> USER_ID = Property.create("userId", String.class);
    public static final Property<Long> REALM_KEY = Property.create("realmKey", Long.class);
    public static final Property<Long> ROLE_KEY = Property.create("roleKey", Long.class);
    public static final Property<SakaiRealm> SAKAI_REALM = Property.create("sakaiRealm", SakaiRealm.class);
    public static final Property<SakaiRealmRole> SAKAI_REALM_ROLE = Property.create("sakaiRealmRole", SakaiRealmRole.class);

    protected String active;
    protected String provided;
    protected String userId;
    protected Long realmKey;
    protected Long roleKey;

    protected Object sakaiRealm;
    protected Object sakaiRealmRole;

    public String getActive() {
        beforePropertyRead("active");
        return this.active;
    }

    public String getProvided() {
        beforePropertyRead("provided");
        return this.provided;
    }

    public String getUserId() {
        beforePropertyRead("userId");
        return this.userId;
    }

    public Long getRealmKey() {
        beforePropertyRead("realmKey");
        return this.realmKey;
    }

    public Long getRoleKey() {
        beforePropertyRead("roleKey");
        return this.roleKey;
    }

    public SakaiRealm getSakaiRealm() {
        return (SakaiRealm)readProperty("sakaiRealm");
    }

    public SakaiRealmRole getSakaiRealmRole() {
        return (SakaiRealmRole)readProperty("sakaiRealmRole");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "active":
                return this.active;
            case "provided":
                return this.provided;
            case "userId":
                return this.userId;
            case "realmKey":
                return this.realmKey;
            case "roleKey":
                return this.roleKey;
            case "sakaiRealm":
                return this.sakaiRealm;
            case "sakaiRealmRole":
                return this.sakaiRealmRole;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "active":
                this.active = (String)val;
                break;
            case "provided":
                this.provided = (String)val;
                break;
            case "userId":
                this.userId = (String)val;
                break;
            case "realmKey":
                this.realmKey = (Long)val;
                break;
            case "roleKey":
                this.roleKey = (Long)val;
                break;
            case "sakaiRealm":
                this.sakaiRealm = val;
                break;
            case "sakaiRealmRole":
                this.sakaiRealmRole = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.active);
        out.writeObject(this.provided);
        out.writeObject(this.userId);
        out.writeObject(this.realmKey);
        out.writeObject(this.roleKey);
        out.writeObject(this.sakaiRealm);
        out.writeObject(this.sakaiRealmRole);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.active = (String)in.readObject();
        this.provided = (String)in.readObject();
        this.userId = (String)in.readObject();
        this.realmKey = (Long)in.readObject();
        this.roleKey = (Long)in.readObject();
        this.sakaiRealm = in.readObject();
        this.sakaiRealmRole = in.readObject();
    }

}
