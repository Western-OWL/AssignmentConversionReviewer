package ca.uwo.wts.owl.data.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import ca.uwo.wts.owl.data.SakaiRealmRlGr;
import ca.uwo.wts.owl.data.SakaiRealmRole;

/**
 * Class _SakaiRealm was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _SakaiRealm extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String REALM_KEY_PK_COLUMN = "REALM_KEY";

    public static final Property<String> REALM_ID = Property.create("realmId", String.class);
    public static final Property<String> PROVIDER_ID = Property.create("providerId", String.class);
    public static final Property<String> CREATEDBY = Property.create("createdby", String.class);
    public static final Property<String> MODIFIEDBY = Property.create("modifiedby", String.class);
    public static final Property<LocalDateTime> CREATEDON = Property.create("createdon", LocalDateTime.class);
    public static final Property<LocalDateTime> MODIFIEDON = Property.create("modifiedon", LocalDateTime.class);
    public static final Property<Long> REALM_KEY = Property.create("realmKey", Long.class);
    public static final Property<List<SakaiRealmRlGr>> SAKAI_REALM_RL_GRS = Property.create("sakaiRealmRlGrs", List.class);
    public static final Property<SakaiRealmRole> SAKAI_REALM_ROLE = Property.create("sakaiRealmRole", SakaiRealmRole.class);

    protected String realmId;
    protected String providerId;
    protected String createdby;
    protected String modifiedby;
    protected LocalDateTime createdon;
    protected LocalDateTime modifiedon;
    protected Long realmKey;

    protected Object sakaiRealmRlGrs;
    protected Object sakaiRealmRole;

    public String getRealmId() {
        beforePropertyRead("realmId");
        return this.realmId;
    }

    public String getProviderId() {
        beforePropertyRead("providerId");
        return this.providerId;
    }

    public String getCreatedby() {
        beforePropertyRead("createdby");
        return this.createdby;
    }

    public String getModifiedby() {
        beforePropertyRead("modifiedby");
        return this.modifiedby;
    }

    public LocalDateTime getCreatedon() {
        beforePropertyRead("createdon");
        return this.createdon;
    }

    public LocalDateTime getModifiedon() {
        beforePropertyRead("modifiedon");
        return this.modifiedon;
    }

    public Long getRealmKey() {
        beforePropertyRead("realmKey");
        return this.realmKey;
    }

    public void addToSakaiRealmRlGrs(SakaiRealmRlGr obj) {
        addToManyTarget("sakaiRealmRlGrs", obj, true);
    }

    public void removeFromSakaiRealmRlGrs(SakaiRealmRlGr obj) {
        removeToManyTarget("sakaiRealmRlGrs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<SakaiRealmRlGr> getSakaiRealmRlGrs() {
        return (List<SakaiRealmRlGr>)readProperty("sakaiRealmRlGrs");
    }

    public SakaiRealmRole getSakaiRealmRole() {
        return (SakaiRealmRole)readProperty("sakaiRealmRole");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "realmId":
                return this.realmId;
            case "providerId":
                return this.providerId;
            case "createdby":
                return this.createdby;
            case "modifiedby":
                return this.modifiedby;
            case "createdon":
                return this.createdon;
            case "modifiedon":
                return this.modifiedon;
            case "realmKey":
                return this.realmKey;
            case "sakaiRealmRlGrs":
                return this.sakaiRealmRlGrs;
            case "sakaiRealmRole":
                return this.sakaiRealmRole;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "realmId":
                this.realmId = (String)val;
                break;
            case "providerId":
                this.providerId = (String)val;
                break;
            case "createdby":
                this.createdby = (String)val;
                break;
            case "modifiedby":
                this.modifiedby = (String)val;
                break;
            case "createdon":
                this.createdon = (LocalDateTime)val;
                break;
            case "modifiedon":
                this.modifiedon = (LocalDateTime)val;
                break;
            case "realmKey":
                this.realmKey = (Long)val;
                break;
            case "sakaiRealmRlGrs":
                this.sakaiRealmRlGrs = val;
                break;
            case "sakaiRealmRole":
                this.sakaiRealmRole = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.realmId);
        out.writeObject(this.providerId);
        out.writeObject(this.createdby);
        out.writeObject(this.modifiedby);
        out.writeObject(this.createdon);
        out.writeObject(this.modifiedon);
        out.writeObject(this.realmKey);
        out.writeObject(this.sakaiRealmRlGrs);
        out.writeObject(this.sakaiRealmRole);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.realmId = (String)in.readObject();
        this.providerId = (String)in.readObject();
        this.createdby = (String)in.readObject();
        this.modifiedby = (String)in.readObject();
        this.createdon = (LocalDateTime)in.readObject();
        this.modifiedon = (LocalDateTime)in.readObject();
        this.realmKey = (Long)in.readObject();
        this.sakaiRealmRlGrs = in.readObject();
        this.sakaiRealmRole = in.readObject();
    }

}
