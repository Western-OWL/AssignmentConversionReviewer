package ca.uwo.wts.owl.data.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _AssignmentContent was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _AssignmentContent extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String CONTENT_ID_PK_COLUMN = "CONTENT_ID";

    public static final Property<String> CONTENT_ID = Property.create("contentId", String.class);
    public static final Property<String> CONTEXT = Property.create("context", String.class);
    public static final Property<String> XML = Property.create("xml", String.class);

    protected String contentId;
    protected String context;
    protected String xml;


    public void setContentId(String contentId) {
        beforePropertyWrite("contentId", this.contentId, contentId);
        this.contentId = contentId;
    }

    public String getContentId() {
        beforePropertyRead("contentId");
        return this.contentId;
    }

    public void setContext(String context) {
        beforePropertyWrite("context", this.context, context);
        this.context = context;
    }

    public String getContext() {
        beforePropertyRead("context");
        return this.context;
    }

    public void setXml(String xml) {
        beforePropertyWrite("xml", this.xml, xml);
        this.xml = xml;
    }

    public String getXml() {
        beforePropertyRead("xml");
        return this.xml;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "contentId":
                return this.contentId;
            case "context":
                return this.context;
            case "xml":
                return this.xml;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "contentId":
                this.contentId = (String)val;
                break;
            case "context":
                this.context = (String)val;
                break;
            case "xml":
                this.xml = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.contentId);
        out.writeObject(this.context);
        out.writeObject(this.xml);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.contentId = (String)in.readObject();
        this.context = (String)in.readObject();
        this.xml = (String)in.readObject();
    }

}
