package ca.uwo.wts.owl.data.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import ca.uwo.wts.owl.data.SakaiRealmRlFn;

/**
 * Class _SakaiRealmFunction was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _SakaiRealmFunction extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String FUNCTION_KEY_PK_COLUMN = "FUNCTION_KEY";

    public static final Property<String> FUNCTION_NAME = Property.create("functionName", String.class);
    public static final Property<Long> FUNCTION_KEY = Property.create("functionKey", Long.class);
    public static final Property<List<SakaiRealmRlFn>> SAKAI_REALM_RL_FNS = Property.create("sakaiRealmRlFns", List.class);

    protected String functionName;
    protected Long functionKey;

    protected Object sakaiRealmRlFns;

    public void setFunctionName(String functionName) {
        beforePropertyWrite("functionName", this.functionName, functionName);
        this.functionName = functionName;
    }

    public String getFunctionName() {
        beforePropertyRead("functionName");
        return this.functionName;
    }

    public void setFunctionKey(Long functionKey) {
        beforePropertyWrite("functionKey", this.functionKey, functionKey);
        this.functionKey = functionKey;
    }

    public Long getFunctionKey() {
        beforePropertyRead("functionKey");
        return this.functionKey;
    }

    public void addToSakaiRealmRlFns(SakaiRealmRlFn obj) {
        addToManyTarget("sakaiRealmRlFns", obj, true);
    }

    public void removeFromSakaiRealmRlFns(SakaiRealmRlFn obj) {
        removeToManyTarget("sakaiRealmRlFns", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<SakaiRealmRlFn> getSakaiRealmRlFns() {
        return (List<SakaiRealmRlFn>)readProperty("sakaiRealmRlFns");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "functionName":
                return this.functionName;
            case "functionKey":
                return this.functionKey;
            case "sakaiRealmRlFns":
                return this.sakaiRealmRlFns;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "functionName":
                this.functionName = (String)val;
                break;
            case "functionKey":
                this.functionKey = (Long)val;
                break;
            case "sakaiRealmRlFns":
                this.sakaiRealmRlFns = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.functionName);
        out.writeObject(this.functionKey);
        out.writeObject(this.sakaiRealmRlFns);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.functionName = (String)in.readObject();
        this.functionKey = (Long)in.readObject();
        this.sakaiRealmRlFns = in.readObject();
    }

}
