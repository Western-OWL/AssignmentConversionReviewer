package ca.uwo.wts.owl.data.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import ca.uwo.wts.owl.data.SakaiSite;

/**
 * Class _SakaiSiteGroup was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _SakaiSiteGroup extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String GROUP_ID_PK_COLUMN = "GROUP_ID";

    public static final Property<String> TITLE = Property.create("title", String.class);
    public static final Property<String> DESCRIPTION = Property.create("description", String.class);
    public static final Property<String> GROUP_ID = Property.create("groupId", String.class);
    public static final Property<SakaiSite> SITE = Property.create("site", SakaiSite.class);

    protected String title;
    protected String description;
    protected String groupId;

    protected Object site;

    public String getTitle() {
        beforePropertyRead("title");
        return this.title;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public String getGroupId() {
        beforePropertyRead("groupId");
        return this.groupId;
    }

    public SakaiSite getSite() {
        return (SakaiSite)readProperty("site");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "title":
                return this.title;
            case "description":
                return this.description;
            case "groupId":
                return this.groupId;
            case "site":
                return this.site;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "title":
                this.title = (String)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "groupId":
                this.groupId = (String)val;
                break;
            case "site":
                this.site = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.title);
        out.writeObject(this.description);
        out.writeObject(this.groupId);
        out.writeObject(this.site);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.title = (String)in.readObject();
        this.description = (String)in.readObject();
        this.groupId = (String)in.readObject();
        this.site = in.readObject();
    }

}
